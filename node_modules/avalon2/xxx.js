var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
System.register("bbb", [], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var Animal, Snake;
    return {
        setters: [],
        execute: function () {
            Animal = (function () {
                function Animal(name) {
                    this.name = name;
                }
                Animal.prototype.move = function (distanceInMeters) {
                    if (distanceInMeters === void 0) { distanceInMeters = 0; }
                    console.log(this.name + " moved " + distanceInMeters + "m.");
                };
                return Animal;
            }());
            exports_1("Animal", Animal);
            Snake = (function (_super) {
                __extends(Snake, _super);
                function Snake(name) {
                    return _super.call(this, name) || this;
                }
                Snake.prototype.move = function (distanceInMeters) {
                    if (distanceInMeters === void 0) { distanceInMeters = 5; }
                    console.log("Slithering...");
                    _super.prototype.move.call(this, distanceInMeters);
                };
                return Snake;
            }(Animal));
            exports_1("Snake", Snake);
        }
    };
});
System.register("aaa", ["bbb"], function (exports_2, context_2) {
    "use strict";
    var __moduleName = context_2 && context_2.id;
    var bbb_1, Horse, a, sam, tom;
    return {
        setters: [
            function (bbb_1_1) {
                bbb_1 = bbb_1_1;
            }
        ],
        execute: function () {
            Horse = (function (_super) {
                __extends(Horse, _super);
                function Horse(name) {
                    return _super.call(this, name) || this;
                }
                Horse.prototype.move = function (distanceInMeters) {
                    if (distanceInMeters === void 0) { distanceInMeters = 45; }
                    console.log("Galloping...");
                    _super.prototype.move.call(this, distanceInMeters);
                };
                return Horse;
            }(bbb_1.Animal));
            a = '333';
            sam = new bbb_1.Snake("Sammy the Python");
            tom = new Horse("Tommy the Palomino");
            console.log(typeof sam);
            sam.move();
            tom.move(34);
        }
    };
});
